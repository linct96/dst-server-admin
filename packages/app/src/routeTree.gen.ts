/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as HomeImport } from './routes/home'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const InitializeModeLazyImport = createFileRoute('/initialize/mode')()
const ClusterFormLazyImport = createFileRoute('/cluster/form')()
const ClusterCoolLazyImport = createFileRoute('/cluster/cool')()

// Create/Update Routes

const TestRoute = TestImport.update({
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const InitializeModeLazyRoute = InitializeModeLazyImport.update({
  path: '/initialize/mode',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/initialize/mode.lazy').then((d) => d.Route),
)

const ClusterFormLazyRoute = ClusterFormLazyImport.update({
  path: '/cluster/form',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cluster/form.lazy').then((d) => d.Route))

const ClusterCoolLazyRoute = ClusterCoolLazyImport.update({
  path: '/cluster/cool',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cluster/cool.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/cluster/cool': {
      id: '/cluster/cool'
      path: '/cluster/cool'
      fullPath: '/cluster/cool'
      preLoaderRoute: typeof ClusterCoolLazyImport
      parentRoute: typeof rootRoute
    }
    '/cluster/form': {
      id: '/cluster/form'
      path: '/cluster/form'
      fullPath: '/cluster/form'
      preLoaderRoute: typeof ClusterFormLazyImport
      parentRoute: typeof rootRoute
    }
    '/initialize/mode': {
      id: '/initialize/mode'
      path: '/initialize/mode'
      fullPath: '/initialize/mode'
      preLoaderRoute: typeof InitializeModeLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  HomeRoute,
  TestRoute,
  ClusterCoolLazyRoute,
  ClusterFormLazyRoute,
  InitializeModeLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/home",
        "/test",
        "/cluster/cool",
        "/cluster/form",
        "/initialize/mode"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/cluster/cool": {
      "filePath": "cluster/cool.lazy.tsx"
    },
    "/cluster/form": {
      "filePath": "cluster/form.lazy.tsx"
    },
    "/initialize/mode": {
      "filePath": "initialize/mode.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
