/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as HomebakImport } from './routes/home_bak'
import { Route as HomeImport } from './routes/home'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const InitializeModeLazyImport = createFileRoute('/initialize/mode')()
const ClusterFormLazyImport = createFileRoute('/cluster/form')()
const ClusterCoolLazyImport = createFileRoute('/cluster/cool')()

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const HomebakRoute = HomebakImport.update({
  id: '/home_bak',
  path: '/home_bak',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const InitializeModeLazyRoute = InitializeModeLazyImport.update({
  id: '/initialize/mode',
  path: '/initialize/mode',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/initialize/mode.lazy').then((d) => d.Route),
)

const ClusterFormLazyRoute = ClusterFormLazyImport.update({
  id: '/cluster/form',
  path: '/cluster/form',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cluster/form.lazy').then((d) => d.Route))

const ClusterCoolLazyRoute = ClusterCoolLazyImport.update({
  id: '/cluster/cool',
  path: '/cluster/cool',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cluster/cool.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/home_bak': {
      id: '/home_bak'
      path: '/home_bak'
      fullPath: '/home_bak'
      preLoaderRoute: typeof HomebakImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/cluster/cool': {
      id: '/cluster/cool'
      path: '/cluster/cool'
      fullPath: '/cluster/cool'
      preLoaderRoute: typeof ClusterCoolLazyImport
      parentRoute: typeof rootRoute
    }
    '/cluster/form': {
      id: '/cluster/form'
      path: '/cluster/form'
      fullPath: '/cluster/form'
      preLoaderRoute: typeof ClusterFormLazyImport
      parentRoute: typeof rootRoute
    }
    '/initialize/mode': {
      id: '/initialize/mode'
      path: '/initialize/mode'
      fullPath: '/initialize/mode'
      preLoaderRoute: typeof InitializeModeLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/home_bak': typeof HomebakRoute
  '/test': typeof TestRoute
  '/cluster/cool': typeof ClusterCoolLazyRoute
  '/cluster/form': typeof ClusterFormLazyRoute
  '/initialize/mode': typeof InitializeModeLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/home_bak': typeof HomebakRoute
  '/test': typeof TestRoute
  '/cluster/cool': typeof ClusterCoolLazyRoute
  '/cluster/form': typeof ClusterFormLazyRoute
  '/initialize/mode': typeof InitializeModeLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/home_bak': typeof HomebakRoute
  '/test': typeof TestRoute
  '/cluster/cool': typeof ClusterCoolLazyRoute
  '/cluster/form': typeof ClusterFormLazyRoute
  '/initialize/mode': typeof InitializeModeLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/home_bak'
    | '/test'
    | '/cluster/cool'
    | '/cluster/form'
    | '/initialize/mode'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/home_bak'
    | '/test'
    | '/cluster/cool'
    | '/cluster/form'
    | '/initialize/mode'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/home_bak'
    | '/test'
    | '/cluster/cool'
    | '/cluster/form'
    | '/initialize/mode'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  HomebakRoute: typeof HomebakRoute
  TestRoute: typeof TestRoute
  ClusterCoolLazyRoute: typeof ClusterCoolLazyRoute
  ClusterFormLazyRoute: typeof ClusterFormLazyRoute
  InitializeModeLazyRoute: typeof InitializeModeLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  HomebakRoute: HomebakRoute,
  TestRoute: TestRoute,
  ClusterCoolLazyRoute: ClusterCoolLazyRoute,
  ClusterFormLazyRoute: ClusterFormLazyRoute,
  InitializeModeLazyRoute: InitializeModeLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/home",
        "/home_bak",
        "/test",
        "/cluster/cool",
        "/cluster/form",
        "/initialize/mode"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/home_bak": {
      "filePath": "home_bak.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/cluster/cool": {
      "filePath": "cluster/cool.lazy.tsx"
    },
    "/cluster/form": {
      "filePath": "cluster/form.lazy.tsx"
    },
    "/initialize/mode": {
      "filePath": "initialize/mode.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
